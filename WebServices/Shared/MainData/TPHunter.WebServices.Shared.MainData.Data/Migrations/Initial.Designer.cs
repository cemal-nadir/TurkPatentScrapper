// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TPHunter.WebServices.Shared.MainData.Data;

namespace TPHunter.WebServices.Shared.MainData.Data.Migrations
{
    [DbContext(typeof(MainDataContext))]
    [Migration("20221112154905_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid?>("AttorneyCompanyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AttorneyCompanyID");

                    b.ToTable("Attorneys");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.AttorneyCompany", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("AttorneyCompanies");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Design", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("AttorneyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BulletinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BulletinNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DesignStatusID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AttorneyID");

                    b.HasIndex("DesignStatusID");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProduct", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DesignID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DesignPriortyCountryID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DesignProductPriortyTypeID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExhibitionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExhibitionName")
                        .HasColumnType("text");

                    b.Property<string>("ExhibitionPlace")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstExhibitionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProductApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PriortyApplicationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PriortyDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DesignID");

                    b.HasIndex("DesignPriortyCountryID");

                    b.HasIndex("DesignProductPriortyTypeID");

                    b.ToTable("DesignProducts");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductClassesRelation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DesignProductID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LocarnoClassID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("DesignProductID");

                    b.HasIndex("LocarnoClassID");

                    b.ToTable("DesignProductClassesRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DesignProductID")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageID")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DesignProductID");

                    b.ToTable("DesignProductImages");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyCountry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("DesignProductPriortyCountries");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DesignProductPriortyTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DesignStatuses");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DesignID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DesignTransactionDescriptionID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DesignTransactionTypeID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DesignID");

                    b.HasIndex("DesignTransactionDescriptionID");

                    b.HasIndex("DesignTransactionTypeID");

                    b.ToTable("DesignTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DesignTransactionDescriptionDetailID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DesignTransactionDescriptionDetailID");

                    b.ToTable("DesignTransactionDescriptions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescriptionDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("DesignTransactionDescriptionDetails");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DesignTransactionTypeDetailID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("DesignTransactionTypeDetailID");

                    b.ToTable("DesignTransactionTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionTypeDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("DesignTransactionTypeDetails");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Designer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Designers");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignerRelation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DesignID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DesignerID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("DesignID");

                    b.HasIndex("DesignerID");

                    b.ToTable("DesignerRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Holder", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HolderCode")
                        .HasColumnType("text");

                    b.Property<string>("HolderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("Holders");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.HolderRelation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DataID")
                        .HasColumnType("uuid");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<Guid>("HolderID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("HolderID");

                    b.ToTable("HolderRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Inventor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InventorCode")
                        .HasColumnType("text");

                    b.Property<string>("InventorName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("Inventors");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.InventorRelation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InventorID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("InventorID");

                    b.HasIndex("PatentID");

                    b.ToTable("InventorRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.LocarnoClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("LocarnoClasses");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("AttorneyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("EPCApplicationNumber")
                        .HasColumnType("text");

                    b.Property<string>("EPCPublishNumber")
                        .HasColumnType("text");

                    b.Property<string>("InventionSummary")
                        .HasColumnType("text");

                    b.Property<string>("InventionTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PCTApplicationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PCTPublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PCTPublishNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("PatentApplicationTypeID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatentProtectionTypeID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AttorneyID");

                    b.HasIndex("PatentApplicationTypeID");

                    b.HasIndex("PatentProtectionTypeID");

                    b.ToTable("Patents");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentApplicationType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PatentApplicationTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PatentClassTypeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PatentClassTypeID");

                    b.ToTable("PatentClasses");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClassRelation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatentClassID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PatentClassID");

                    b.HasIndex("PatentID");

                    b.ToTable("PatentClassRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClassType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PatentClassTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPDF", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileID")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PDFType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PatentID");

                    b.ToTable("PatentPDFs");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("PaidAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Queue")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PatentID");

                    b.ToTable("PatentPayments");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPriorty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatentPriortyCountryID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PriortyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PriortyNumber")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PatentID");

                    b.HasIndex("PatentPriortyCountryID");

                    b.ToTable("PatentPriorties");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPriortyCountry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("PatentPriortyCountries");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentProtectionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PatentProtectionTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPublication", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatentPublicationDescriptionID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("PatentID");

                    b.HasIndex("PatentPublicationDescriptionID");

                    b.ToTable("PatentPublications");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPublicationDescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("PatentPublicationDescriptions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatentID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatentTransactionNameID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PatentID");

                    b.HasIndex("PatentTransactionNameID");

                    b.ToTable("PatentTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentTransactionName", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Transaction")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PatentTransactionNames");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMark", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("AttorneyID")
                        .HasColumnType("uuid");

                    b.Property<int[]>("Classes")
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeclareBullettinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeclareBullettinNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("ImageID")
                        .HasColumnType("text");

                    b.Property<string>("InternationalRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProtectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RegistrationBullettinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegistrationBullettinNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("TradeMarkDecisionID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TradeMarkPriortyID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TradeMarkStatusID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TradeMarkTypeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("AttorneyID");

                    b.HasIndex("TradeMarkDecisionID");

                    b.HasIndex("TradeMarkPriortyID");

                    b.HasIndex("TradeMarkStatusID");

                    b.HasIndex("TradeMarkTypeID");

                    b.ToTable("TradeMarks");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecision", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TradeMarkDecisionReasonID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TradeMarkDecisionReasonID");

                    b.ToTable("TradeMarkDecisions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecisionReason", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkDecisionReasons");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriorty", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TradeMarkPriortyCountryID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TradeMarkPriortyCountryID");

                    b.ToTable("TradeMarkPriorties");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriortyCountry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkPriortyCountries");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkServices", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Class")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Service")
                        .HasColumnType("text");

                    b.Property<Guid>("TradeMarkID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TradeMarkID");

                    b.ToTable("TradeMarkServices");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkStatuses");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TradeMarkID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TradeMarkTransactionDescriptionID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TradeMarkTransactionNameID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TradeMarkTransactionTypeID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("TradeMarkID");

                    b.HasIndex("TradeMarkTransactionDescriptionID");

                    b.HasIndex("TradeMarkTransactionNameID");

                    b.HasIndex("TradeMarkTransactionTypeID");

                    b.ToTable("TradeMarkTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionDescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkTransactionDescriptions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AboutMark")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DecisionReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TradeMarkTransactionID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TradeMarkTransactionID");

                    b.ToTable("TradeMarkTransactionDetails");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionName", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Transaction")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkTransactionNames");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkTransactionTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TradeMarkTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.AttorneyCompany", "AttorneyCompany")
                        .WithMany("Attorneys")
                        .HasForeignKey("AttorneyCompanyID");

                    b.Navigation("AttorneyCompany");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Design", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", "Attorney")
                        .WithMany("Designs")
                        .HasForeignKey("AttorneyID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignStatus", "DesignStatus")
                        .WithMany("Designs")
                        .HasForeignKey("DesignStatusID");

                    b.Navigation("Attorney");

                    b.Navigation("DesignStatus");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProduct", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Design", "Design")
                        .WithMany("DesignProducts")
                        .HasForeignKey("DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyCountry", "DesignPriortyCountry")
                        .WithMany("DesignProducts")
                        .HasForeignKey("DesignPriortyCountryID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyType", "DesignProductPriortyType")
                        .WithMany("DesignProducts")
                        .HasForeignKey("DesignProductPriortyTypeID");

                    b.Navigation("Design");

                    b.Navigation("DesignPriortyCountry");

                    b.Navigation("DesignProductPriortyType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductClassesRelation", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProduct", "DesignProduct")
                        .WithMany("DesignProductClassesRelations")
                        .HasForeignKey("DesignProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.LocarnoClass", "LocarnoClass")
                        .WithMany("DesignProductClassesRelations")
                        .HasForeignKey("LocarnoClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignProduct");

                    b.Navigation("LocarnoClass");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductImage", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProduct", "DesignProduct")
                        .WithMany("DesignProductImages")
                        .HasForeignKey("DesignProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignProduct");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransaction", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Design", "Design")
                        .WithMany("DesignTransactions")
                        .HasForeignKey("DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescription", "DesignTransactionDescription")
                        .WithMany("DesignTransactions")
                        .HasForeignKey("DesignTransactionDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionType", "DesignTransactionType")
                        .WithMany("DesignTransactions")
                        .HasForeignKey("DesignTransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("DesignTransactionDescription");

                    b.Navigation("DesignTransactionType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescription", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescriptionDetail", "DesignTransactionDescriptionDetail")
                        .WithMany("DesignTransactionDescriptions")
                        .HasForeignKey("DesignTransactionDescriptionDetailID");

                    b.Navigation("DesignTransactionDescriptionDetail");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionType", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionTypeDetail", "DesignTransactionTypeDetail")
                        .WithMany("DesignTransactionTypes")
                        .HasForeignKey("DesignTransactionTypeDetailID");

                    b.Navigation("DesignTransactionTypeDetail");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignerRelation", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Design", "Design")
                        .WithMany("DesignerRelations")
                        .HasForeignKey("DesignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Designer", "Designer")
                        .WithMany("DesignerRelations")
                        .HasForeignKey("DesignerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Design");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.HolderRelation", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Holder", "Holder")
                        .WithMany("HolderRelations")
                        .HasForeignKey("HolderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.InventorRelation", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Inventor", "Inventor")
                        .WithMany("InventorRelations")
                        .HasForeignKey("InventorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("InventorRelations")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventor");

                    b.Navigation("Patent");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", "Attorney")
                        .WithMany("Patents")
                        .HasForeignKey("AttorneyID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentApplicationType", "PatentApplicationType")
                        .WithMany("Patents")
                        .HasForeignKey("PatentApplicationTypeID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentProtectionType", "PatentProtectionType")
                        .WithMany("Patents")
                        .HasForeignKey("PatentProtectionTypeID");

                    b.Navigation("Attorney");

                    b.Navigation("PatentApplicationType");

                    b.Navigation("PatentProtectionType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClass", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClassType", "PatentClassType")
                        .WithMany("PatentClasses")
                        .HasForeignKey("PatentClassTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatentClassType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClassRelation", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClass", "PatentClass")
                        .WithMany("PatentClassRelations")
                        .HasForeignKey("PatentClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentClassRelations")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patent");

                    b.Navigation("PatentClass");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPDF", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentPDFs")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patent");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPayment", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentPayments")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patent");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPriorty", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentPriorties")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPriortyCountry", "PatentPriortyCountry")
                        .WithMany("PatentPriorties")
                        .HasForeignKey("PatentPriortyCountryID");

                    b.Navigation("Patent");

                    b.Navigation("PatentPriortyCountry");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPublication", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentPublications")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPublicationDescription", "PatentPublicationDescription")
                        .WithMany("PatentPublications")
                        .HasForeignKey("PatentPublicationDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patent");

                    b.Navigation("PatentPublicationDescription");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentTransaction", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", "Patent")
                        .WithMany("PatentTransactions")
                        .HasForeignKey("PatentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.PatentTransactionName", "PatentTransactionName")
                        .WithMany("PatentTransactions")
                        .HasForeignKey("PatentTransactionNameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patent");

                    b.Navigation("PatentTransactionName");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMark", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", "Attorney")
                        .WithMany("TradeMarks")
                        .HasForeignKey("AttorneyID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecision", "TradeMarkDecision")
                        .WithMany("TradeMarks")
                        .HasForeignKey("TradeMarkDecisionID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriorty", "TradeMarkPriorty")
                        .WithMany("TradeMarks")
                        .HasForeignKey("TradeMarkPriortyID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkStatus", "TradeMarkStatus")
                        .WithMany("TradeMarks")
                        .HasForeignKey("TradeMarkStatusID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkType", "TradeMarkType")
                        .WithMany("Trademarks")
                        .HasForeignKey("TradeMarkTypeID");

                    b.Navigation("Attorney");

                    b.Navigation("TradeMarkDecision");

                    b.Navigation("TradeMarkPriorty");

                    b.Navigation("TradeMarkStatus");

                    b.Navigation("TradeMarkType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecision", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecisionReason", "TradeMarkDecisionReason")
                        .WithMany()
                        .HasForeignKey("TradeMarkDecisionReasonID");

                    b.Navigation("TradeMarkDecisionReason");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriorty", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriortyCountry", "TradeMarkPriortyCountry")
                        .WithMany("TradeMarkPriorties")
                        .HasForeignKey("TradeMarkPriortyCountryID");

                    b.Navigation("TradeMarkPriortyCountry");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkServices", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMark", "TradeMark")
                        .WithMany("TradeMarkServices")
                        .HasForeignKey("TradeMarkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeMark");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransaction", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMark", "TradeMark")
                        .WithMany("TradeMarkTransaction")
                        .HasForeignKey("TradeMarkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionDescription", "TradeMarkTransactionDescription")
                        .WithMany("TradeMarkTransactions")
                        .HasForeignKey("TradeMarkTransactionDescriptionID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionName", "TradeMarkTransactionName")
                        .WithMany("TradeMarkTransactions")
                        .HasForeignKey("TradeMarkTransactionNameID");

                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionType", "TradeMarkTransactionType")
                        .WithMany("TradeMarkTransactions")
                        .HasForeignKey("TradeMarkTransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeMark");

                    b.Navigation("TradeMarkTransactionDescription");

                    b.Navigation("TradeMarkTransactionName");

                    b.Navigation("TradeMarkTransactionType");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionDetail", b =>
                {
                    b.HasOne("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransaction", "TradeMarkTransaction")
                        .WithMany("TradeMarkTransactionDetails")
                        .HasForeignKey("TradeMarkTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeMarkTransaction");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Attorney", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("Patents");

                    b.Navigation("TradeMarks");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.AttorneyCompany", b =>
                {
                    b.Navigation("Attorneys");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Design", b =>
                {
                    b.Navigation("DesignerRelations");

                    b.Navigation("DesignProducts");

                    b.Navigation("DesignTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProduct", b =>
                {
                    b.Navigation("DesignProductClassesRelations");

                    b.Navigation("DesignProductImages");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyCountry", b =>
                {
                    b.Navigation("DesignProducts");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignProductPriortyType", b =>
                {
                    b.Navigation("DesignProducts");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignStatus", b =>
                {
                    b.Navigation("Designs");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescription", b =>
                {
                    b.Navigation("DesignTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionDescriptionDetail", b =>
                {
                    b.Navigation("DesignTransactionDescriptions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionType", b =>
                {
                    b.Navigation("DesignTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.DesignTransactionTypeDetail", b =>
                {
                    b.Navigation("DesignTransactionTypes");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Designer", b =>
                {
                    b.Navigation("DesignerRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Holder", b =>
                {
                    b.Navigation("HolderRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Inventor", b =>
                {
                    b.Navigation("InventorRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.LocarnoClass", b =>
                {
                    b.Navigation("DesignProductClassesRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.Patent", b =>
                {
                    b.Navigation("InventorRelations");

                    b.Navigation("PatentClassRelations");

                    b.Navigation("PatentPayments");

                    b.Navigation("PatentPDFs");

                    b.Navigation("PatentPriorties");

                    b.Navigation("PatentPublications");

                    b.Navigation("PatentTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentApplicationType", b =>
                {
                    b.Navigation("Patents");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClass", b =>
                {
                    b.Navigation("PatentClassRelations");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentClassType", b =>
                {
                    b.Navigation("PatentClasses");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPriortyCountry", b =>
                {
                    b.Navigation("PatentPriorties");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentProtectionType", b =>
                {
                    b.Navigation("Patents");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentPublicationDescription", b =>
                {
                    b.Navigation("PatentPublications");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.PatentTransactionName", b =>
                {
                    b.Navigation("PatentTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMark", b =>
                {
                    b.Navigation("TradeMarkServices");

                    b.Navigation("TradeMarkTransaction");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkDecision", b =>
                {
                    b.Navigation("TradeMarks");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriorty", b =>
                {
                    b.Navigation("TradeMarks");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkPriortyCountry", b =>
                {
                    b.Navigation("TradeMarkPriorties");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkStatus", b =>
                {
                    b.Navigation("TradeMarks");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransaction", b =>
                {
                    b.Navigation("TradeMarkTransactionDetails");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionDescription", b =>
                {
                    b.Navigation("TradeMarkTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionName", b =>
                {
                    b.Navigation("TradeMarkTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkTransactionType", b =>
                {
                    b.Navigation("TradeMarkTransactions");
                });

            modelBuilder.Entity("TPHunter.WebServices.Shared.MainData.Core.Models.TradeMarkType", b =>
                {
                    b.Navigation("Trademarks");
                });
#pragma warning restore 612, 618
        }
    }
}
